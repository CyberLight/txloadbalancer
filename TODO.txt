Duncan's TODO: API-compatible changes
-------------------------------------
 * replace admin thread with twisted services
   . replace stdlib HTTP server with twisted.web HTTP server
   . add basic auth to twisted web version of admin ui
   . add https support for twisted web version of admin ui

Duncan's TODO: break 'em changes
--------------------------------
 * remove all of asynccore and make this a twisted-only app
 * add an admin configuration option for setting the refresh rate
 * add an admin option for setting the project URL
 * reorganize and rename the modules
   . move micopublisher into something like web.api
 * rename classes
 * isolate all of admin functionality in its own space (so that we could
   replace it with Divmod Mantissa)
 * enable the manager to run as its own service in a twistd process
 * write a manager implementation that can run as a twisted plugin
 * remove XML; use the .tac files to configure services, groups, and hosts
 * add heartbeat/HA features for lb'ed services to communicate back up to the
   lb manager
 * implement those as a twisted plugin
 * add an XML-RPC service instead of the custom web API
 * maybe move the "hidden" listener initialization/creation into something
   explicit that the .tac file does?
 * I don't like the default behaviour of adding bad hosts back into circulation
   without any checks; I want to add something there...

Original TODO:
--------------
Things that could be added:
    logging cleanup
    scheduler stats structures cleanup
    adminUp/adminDown host
    'weighted' hosts

    more doco
    write a client that compares config xml and running xml, and updates
      the latter to match the former. mostly there now, see compareconf
    Figure out a way to restart/upgrade pydir. Idea: close down listener, start
      new code immediately. Let old connections on old pydir finish (run to
      completion) before exiting.
    Replace crappy manager thread and admin thread with twisted-based
      implementations.

    Caching of DNS lookups
    dump out curBadHosts/histBadHosts/open
    make the connection checker work
    sticky connections. keep a cache of 'client_ip':'backend_ip'.
      manager needs to be able to call "scheduler.cleanup()" to allow the
      cache to be manageable.

Admin interface bits left to do:

  Information:
    [maybe] config / config.txt ?
    [maybe] config vs. running
    [maybe] reload config, making changes
  Host mgmt:
    delAllHosts?service=NNN&group=NNN
  Group mgmt:
    changeScheduler?service=NNN&group=NNN&scheduler=NNN
  Service mgmt:
    newService?service=NNN&listen=NNN
    newGroup?service=NNN&group=NNN&scheduler=NNN
    delGroup?service=NNN&group=NNN
  other
    closeLog
    retryHost?service=NNN&group=NNN&client=NNN
    hostAdminDown
    hostAdminUp
    [maybe] shutdown?

multiple admins for a pydir (e.g. one http, one https)

make enable optional

logging options?

Document the various return results from the text mode interfaces -
eg running.txt

additional schedulers.

better testing stuff in SchedulerManager, rather than just dropping the
dead entry back into the mix. In the case of "it's down", this is harmless,
but nonetheless. Store away more info about the down hosts - when, how long
til next test, &c.

expires on the CSS.

seriously refactor the CSS and also the pdadmin_running HTML. Nasty nasty.

pid file?

specify users not in the config.xml file, but somewhere else.

what does 'host unknown' raise under 2.1?

Clean up all the logging. Logging now goes to a single place, but in
inconsistent format. Still, it's better than it was.

Track the count of faults.

If M2Crypto is installed, allow a https-based admin interface. Sort-of
there now, use the undocumented 'secure="yes"' flag to the admin directive.

Additional idea: connection count scheduler. could be used to track
licensing of a service, or limit it.

